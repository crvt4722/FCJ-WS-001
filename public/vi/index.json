[
{
	"uri": "//localhost:1313/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Giới Thiệu Bài Lab: Triển Khai Pipeline CI/CD Sử Dụng Các Dịch Vụ AWS 1. Tổng Quan Trong bài lab này, chúng ta sẽ đi qua quá trình thiết lập một Pipeline Continuous Integration/Continuous Deployment (CI/CD) để triển khai một máy chủ đơn giản bằng cách sử dụng các dịch vụ AWS bao gồm CodeCommit, CodeBuild, CodeDeploy, EC2, CodeDeploy Agent, ECR và Docker.\n2. Mục Tiêu Mục tiêu của bài lab này là tự động hóa quá trình triển khai của một ứng dụng máy chủ đơn giản lên một EC2 bằng cách triển khai một pipeline CI/CD. Chúng ta sẽ sử dụng các dịch vụ AWS để quản lý mã nguồn, tạo Docker images và triển khai ứng dụng một cách tự động.\nIntroduction Preparation CodeCommit CodeBuild EC2 CodeDeploy CodePipeline ECR Testing "
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction to the Lab: Implementing CI/CD Pipeline Using AWS Services 1. Overview In the modern business world, continuous competition and the need to respond quickly and efficiently to users are key factors in the success of any enterprise. Deploying a website with high availability, robust performance, and solid security not only enhances a company's reputation but also creates a superior user experience, driving sustainable growth. To achieve this, Amazon Web Services (AWS) has become an indispensable tool, helping businesses not only build but also optimize their web systems. In today's workshop, we will explore the essential steps and AWS services that can help you deploy a website that not only meets but exceeds customer expectations, ensuring business continuity and enhancing competitiveness in the market.\n2. Objectives The objective of this lab is to deploy a highly available, high-performance, and secure website for businesses using AWS services.
\nContent Introduction Preparation CodeCommit CodeBuild EC2 CodeDeploy CodePipeline ECR Testing "
},
{
	"uri": "//localhost:1313/vi/5-ec2/5.2-testconnecttoec2/",
	"title": "Kiểm tra kết nối SSH tới EC2",
	"tags": [],
	"description": "",
	"content": " Quay trở lại trang chủ và hãy chắc chắn rằng Instance state của bạn đã ở trạng thái Running\nTiến hành kết nối SSH tới EC2 Instance\nChọn EC2 vừa tạo\nChọn Connect\nỞ màn hình Connect to instance chúng ta chọn SSH client\nMở cửa sổ Terminal và tiến hành kết nối\nHãy di chuyển tới folder chứa file key pair mà chúng ta đã tạo\nchmod 400 \u0026lt;key-pair-name.pem\u0026gt;\rTiến hành kết nối\nssh -i \u0026quot;mac-key.pem\u0026quot; ec2-user@ec2-13-215-154-122.ap-southeast-1.compute.amazonaws.com\rCác bạn có thể lấy thông tin kết nối ở trang Connect to instance\nKết nối thành công\n"
},
{
	"uri": "//localhost:1313/vi/4-codebuild/4.1-createcodebuild/",
	"title": "Tạo CodeBuild",
	"tags": [],
	"description": "",
	"content": "Tạo CodeBuild Chúng ta truy cập vào CodeBuild\nChọn Build projects sau đó chọn Create project\nTrong giao diện Create build project\nNhập aws-ci-cd-codebuild cho Project name.\nMục Source\nMục Source provider là AWS CodeCommit\nMục Repository là aws-ci-cd-codecommit - Tên CodeCommit mà chúng ta đã tạo\nChọn Branch\nChọn main\nMục Environment\nPhần Service role chúng ta chọn New service role để AWS tạo cho chúng ta 1 service role mới Mục Buildspec\nChúng ta chọn Use a buildspec file từ đó CodeBuild sẽ đọc file buildspec.yml trong CodeCommit Mục Logs\nChọn CloudWatch logs - optional\nỞ đây build output chúng ta đã đẩy lên ECR nên không chọn mục S3\nHoàn thành build project\n"
},
{
	"uri": "//localhost:1313/vi/3-codecommit/3.1-createcodecommit/",
	"title": "Tạo CodeCommit",
	"tags": [],
	"description": "",
	"content": "Tạo CodeCommit Đầu tiên chúng ta sẽ tạo 1 repository CodeCommit.\nTruy cập vào CodeCommit Nhập aws-ci-cd-codecommit cho repository và chọn Create.\nHoàn thành tạo repository.\nThực hiện push code lên CodeCommit với Credentials đã tạo.\nPush code lên thành công\n"
},
{
	"uri": "//localhost:1313/vi/7-codepipeline/7.1-createcodepipeline/",
	"title": "Tạo CodePipeline",
	"tags": [],
	"description": "",
	"content": "Tạo CodePipeline Chúng ta truy cập vào CodePipeline\nChọn Pipelines sau đó chọn Create pipeline Ở màn hình Create new pipeline\nStep 1: Choose pipeline settings\nMục Pipeline name đặt tên aws-ci-cd-pipeline\nNext\nStep 2: Add source stage\nMục Source provider chọn AWS CodeCommit\nMục Repository name chọn aws-ci-cd-codecommit mà chúng ta đã tạo khi tạo CodeCommit\nBranch name chọn main\nNext\nStep 3: Add build stage\nMục Build provider chọn AWS CodeBuild\nMục Region chọn Asia Pacific (Singapore)\nMục Project name chọn aws-ci-cd-codebuild mà chúng ta đã tạo khi tạo CodeBuild\nNext\nStep 4: Add deploy stage\nMục Deploy provider chọn AWS CodeDeploy\nMục Region chọn Asia Pacific (Singapore)\nMục Application name chọn aws-ci-cd-codedeploy mà chúng ta đã tạo khi tạo Codedeploy\nMục Deployment group chọn aws-ci-cd-deploy-group mà chúng ta đã tạo khi tạo Codedeploy\nNext\nStep 5: Review\nCreate Pipeline\n"
},
{
	"uri": "//localhost:1313/vi/5-ec2/5.1-createec2/",
	"title": "Tạo EC2",
	"tags": [],
	"description": "",
	"content": "Tạo EC2 Chúng ta truy cập vào EC2\nChọn Launch instances Mục Name and tags của instance chúng ta nhập aws-ci-cd-ec2\nThực hiện chọn AMI\nChọn Quick Start\nChọn Amazon Linux 2\nChọn AMI\nThực hiện tạo Key pair\nChọn Create key pair\nKey pair name nhập aws-ci-cd-ec2-key (tên tùy chọn, bạn có thể đặt bất kỳ).\nKey pair type, chọn RSA\nPrivate key file format, chọn .pem\nChọn Create key pair\nThực hiện chọn Instance type\nMục Network settings\nChọn Create security group\nChọn Allow SSH traffic from và Allow HTTP traffic from the internet\nTiến hành Launch instance\n"
},
{
	"uri": "//localhost:1313/vi/8-ecr/8.1-createecr/",
	"title": "Tạo ECR",
	"tags": [],
	"description": "",
	"content": " Chúng ta truy cập vào ECR\nChọn Repositories sau đó chọn Create repositories Màn hình Create repository\nChọn Private\nỞ mục Repository name chúng ta điền ci_cd_workshop\nCreate repository\n"
},
{
	"uri": "//localhost:1313/vi/2-prepare/2.1-gitcredentials/",
	"title": "Tạo HTTPS Git credentials for AWS CodeCommit",
	"tags": [],
	"description": "",
	"content": "Các bước chuẩn bị Kiểm tra tài khoản AWS của bạn đã cung cấp đủ các quyền sau:\nTạo HTTPS Git credentials cho AWS CodeCommit\n"
},
{
	"uri": "//localhost:1313/vi/6-codedeploy/6.1-createiam/",
	"title": "Tạo IAM cho CodeDeploy",
	"tags": [],
	"description": "",
	"content": " Chúng ta truy cập vào IAM\nChọn Roles sau đó chọn Create role Trong giao diện Create role\nMục Service or use case chúng ta tìm kiếm và chọn CodeDeploy\nChọn Next\nỞ màn hình Add permissions\nPhần Permissions policies đã được chọn sẵn\nChọn Next\nTiếp theo chúng ta thêm quyền AmazonEC2RoleforAWSCodeDeploy cho CodeDeployServiceRole\nỞ màn hình Name, review, and create\nĐiền Role name là CodeDeployServiceRole\nChọn Create role\n"
},
{
	"uri": "//localhost:1313/vi/2-prepare/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Các bước chuẩn bị Kiểm tra tài khoản AWS của bạn đã cung cấp đủ các quyền sau:\n"
},
{
	"uri": "//localhost:1313/vi/8-ecr/8.2-configecr-ci/",
	"title": "Cấu hình ECR cho CI",
	"tags": [],
	"description": "",
	"content": " Chúng ta truy cập vào ECR\nCopy URI của repo vừa tạo Truy cập vào CodeCommit\nChọn Repositories\nTruy cập vào repo mà chúng ta đã tạo aws-ci-cd-codecommit\nTruy cập file buildspec.yml Chọn Edit\nThay đổi các \u0026lt;ECR_REPOSITORY_URI\u0026gt; thành URI của repo ECR\nThay đổi các thành ap-southeast-1\nSau khi thay đổi, điền 1 số thông tin cần thiết\nCommit changes\n"
},
{
	"uri": "//localhost:1313/vi/7-codepipeline/7.2-configcodepipeline/",
	"title": "Config CodePipeline",
	"tags": [],
	"description": "",
	"content": "Config CodePipeline Sau khi đã tạo xong CodePipeline sẽ thực hiện quá trình nhưng sẽ gặp lỗi ở bước Deploy\nỞ màn hình aws-ci-cd-pipeline chúng ta chọn Edit\nỞ phần Edit: Deploy chúng ta chọn Edit stage\nỞ cửa sổ edit\nMục Input artifacts chúng ta đổi thành Source Artifact\nChọn Done\nHoàn tất quá trình chọn Save\n"
},
{
	"uri": "//localhost:1313/vi/2-prepare/2.2-sourcecode/",
	"title": "Source code",
	"tags": [],
	"description": "",
	"content": "Chuẩn bị source code Các bạn có thể lấy source code Tại dây Cấu trúc source code Ở đây mình chuẩn bị một server Express.js đơn giản Có 2 file mà chúng ta cần chú ý appspec.yml buildspec.yml buildspec.yml version\nĐịnh nghĩa phiên bản của buildspec.yml Trong trường hợp này, nó là 0.2.\nphases\nGồm 3 phần chính install, pre_build, build, post_build.\ninstall\nTrong block này, một phiên bản của Node.js (phiên bản mới nhất) được cài đặt bằng runtime-versions.\nSau đó, Docker daemon được khởi chạy sử dụng lệnh nohup /usr/local/bin/dockerd và timeout 15 giây được đặt để chờ đến khi Docker daemon sẵn sàng.\nDocker daemon được khởi chạy để lắng nghe trên cả UNIX socket (unix:///var/run/docker.sock) và TCP socket (tcp://127.0.0.1:2375).\nTrình điều khiển lưu trữ overlay2 được sử dụng cho Docker daemon.\npre_build\nTrong block này sẽ mô tả những hành động trước khi quá trình build được diễn ra.\nĐăng nhập vào Amazon ECR (Elastic Container Registry) được thực hiện bằng cách sử dụng AWS CLI và lấy mật khẩu bằng aws ecr get-login-password\nTạo biến $REPOSITORY_URI được đặt để lưu trữ URI của ECR repository.\n$COMMIT_HASH được sử dụng để lấy 7 ký tự đầu tiên của CODEBUILD_RESOLVED_SOURCE_VERSION trả về từ CodeBuild\nIMAGE_TAG được sử dụng làm tag cho Docker image, mặc định là latest.\nbuild\nTrong block này sẽ mô tả những hành động để tiến hành build Docker image\nLệnh docker build được sử dụng để xây dựng Docker image từ Dockerfile trong thư mục hiện tại và đặt tag là $REPOSITORY_URI:latest.\nDocker image được đặt lại tag với tag là $REPOSITORY_URI:$IMAGE_TAG.\npost_build\nTrong block này sẽ mô tả những hành động sau khi quá trình build được thực hiện.\nDocker image được đẩy lên Amazon ECR bằng lệnh docker push.\nMột tệp imagedefinitions.json được tạo ra, chứa định nghĩa của Docker image với tên là \u0026ldquo;exp-code-pipeline\u0026rdquo; và imageUri là $REPOSITORY_URI:$IMAGE_TAG.\nappspec.yml version\nĐịnh nghĩa phiên bản của file cấu hình\nos\nXác định hệ điều hành mà quy trình triển khai này được thiết kế để chạy trên. Trong trường hợp này, quy trình triển khai dự kiến sẽ chạy trên hệ điều hành Linux.\nfiles\nCung cấp danh sách các tệp cần thiết cho quy trình triển khai.\nhooks\nĐịnh nghĩa các hooks (khi chạy) trong quy trình triển khai, chẳng hạn như trước khi cài đặt (BeforeInstall) hoặc khi ứng dụng được khởi động (ApplicationStart).\nBeforeInstall:\nĐây là một hook được gọi trước khi quy trình cài đặt bắt đầu.\npull_docker_image.sh: Một tập lệnh được thực thi để kéo (pull) Docker image từ một kho lưu trữ Docker.\nTimeout được đặt là 300 giây (5 phút), và các tập lệnh được thực thi dưới quyền của người dùng root.\nApplicationStart\nĐây là một hook được gọi sau khi quy trình cài đặt hoàn tất và ứng dụng được sẵn sàng để khởi chạy.\nstart_docker_image.sh: Một tập lệnh được thực thi để khởi động Docker image đã được kéo (pulled) trước đó.\nTimeout được đặt là 300 giây (5 phút), và các tập lệnh được thực thi dưới quyền của người dùng root.\n"
},
{
	"uri": "//localhost:1313/vi/6-codedeploy/6.2-createcodedeploy/",
	"title": "Tạo CodeDeploy",
	"tags": [],
	"description": "",
	"content": "Tạo CodeDeploy Chúng ta truy cập vào CodeDeploy\nChọn Applications sau đó chọn Create application Trong giao diện Create application\nMục Application name nhập aws-ci-cd-codedeploy.\nMục Compute platform chọn EC2/On-premises.\nCreate application.\nTạo thành công\n"
},
{
	"uri": "//localhost:1313/vi/4-codebuild/4.2-createiamcodebuild/",
	"title": "Tạo IAM cho CodeBuild",
	"tags": [],
	"description": "",
	"content": "Tạo IAM cho CodeBuild Truy cập IAM\nChọn Policies\nChọn Create policy\nMàn hình Create policy\nPhần Service Chúng ta tìm Elastic Container Registry {\r\u0026quot;Version\u0026quot;: \u0026quot;2012-10-17\u0026quot;,\r\u0026quot;Statement\u0026quot;: [\r{\r\u0026quot;Effect\u0026quot;: \u0026quot;Allow\u0026quot;,\r\u0026quot;Action\u0026quot;: [\r\u0026quot;ecr:CompleteLayerUpload\u0026quot;,\r\u0026quot;ecr:GetAuthorizationToken\u0026quot;,\r\u0026quot;ecr:UploadLayerPart\u0026quot;,\r\u0026quot;ecr:InitiateLayerUpload\u0026quot;,\r\u0026quot;ecr:BatchCheckLayerAvailability\u0026quot;,\r\u0026quot;ecr:PutImage\u0026quot;\r],\r\u0026quot;Resource\u0026quot;: \u0026quot;*\u0026quot;\r}\r]\r}\rChuyển sang định dạng JSON và điền 1 số quyền cần thiết để CodeBuild có thể thao tác với ECR\nNext\nPhần Policy name điền IAM_CODEDBUILD_CICD\nChọn Create policy\n"
},
{
	"uri": "//localhost:1313/vi/5-ec2/5.3-installcodedeployagent/",
	"title": "Cài đặt CodeDeploy Agent",
	"tags": [],
	"description": "",
	"content": "Tài liệu tham khảo Tại đây\nUpdate yum và cài đặt các packages cần thiết\nsudo yum update\rsudo yum install ruby\rsudo yum install wget\rDi chuyển tới home directory\ncd /home/ec2-user\rTải CodeDeploy agent\nwget https://aws-codedeploy-ap-southeast-1.s3.ap-southeast-1.amazonaws.com/latest/install\rHiện tại mình đang thực hiện trên region ap-southeast-1, nếu các bạn thực hiện trên region khác thì có thể tham khảo link ở đầu page để có được thông tin cài đặt của region đó\nSau khi cài đặt các bạn có thể thấy đã có file install\nTiến hành cấp quyền và cài đặt file install\nchmod +x ./install\rsudo ./install auto\rCài đặt thành công\nKiểm tra trạng thái của CodeDeploy Agent\nsystemctl status codedeploy-agent\rNhư vậy là CodeDeploy Agent đã chạy thành công\n"
},
{
	"uri": "//localhost:1313/vi/8-ecr/8.3-configecr-cd/",
	"title": "Cấu hình ECR cho CD",
	"tags": [],
	"description": "",
	"content": " Chúng ta truy cập vào ECR\nCopy URI của repo vừa tạo Truy cập vào CodeCommit\nChọn Repositories\nTruy cập vào repo mà chúng ta đã tạo aws-ci-cd-codecommit\nTruy cập file scripts / pull_docker_image.sh\nChọn Edit Thay đổi các DOCKER_IMAGE thành URI của repo ECR của bạn lưu ý phải có tag :latest.\nThay đổi region theo region của ECR\nSau khi thay đổi, điền 1 số thông tin cần thiết\nCommit changes\nTruy cập file scripts / start_docker_image.sh\nChọn Edit Thay đổi các DOCKER_IMAGE thành URI của repo ECR của bạn lưu ý phải có tag :latest. Sau khi thay đổi, điền 1 số thông tin cần thiết\nCommit changes\n"
},
{
	"uri": "//localhost:1313/vi/3-codecommit/",
	"title": "CodeCommit",
	"tags": [],
	"description": "",
	"content": "AWS CodeCommit Lưu trữ mã nguồn Git riêng tư một cách an toàn và mở rộng, cộng tác trên mã nguồn Không cần lưu trữ, bảo trì, sao lưu hoặc điều chỉnh quy mô các máy chủ kiểm soát nguồn của riêng bạn..\nTùy chỉnh quyền truy cập cho từng người dùng vào kho lưu trữ của bạn với các tệp được mã hóa tự động trong quá trình truyền.\nĐảm bảo kho lưu trữ của bạn có độ sẵn sàng cao và truy cập được với kiến ​​trúc bền bỉ, có khả năng dự phòng và quy mô linh hoạt.\nDuy trì kho lưu trữ của bạn gần với môi trường xây dựng, dàn dựng và sản xuất của bạn trên AWS.\nCác trường hợp sử dụng Hợp tác trên mã nguồn: Triển khai các quy trình làm việc bao gồm việc xem xét và phản hồi mã theo mặc định và kiểm soát ai có thể thực hiện thay đổi với các nhánh cụ thể.\nSử dụng các công cụ hiện có của bạn: Tiếp tục sử dụng các phần bổ trợ môi trường phát triển, hệ thống tích hợp liên tục và phân phối liên tục (CI/CD) cũng như máy khách đồ họa mà bạn thích.\nNhận thông báo và tập lệnh tùy chỉnh: Nhận thông báo qua Amazon Simple Notification Service (SNS) cho các sự kiện ảnh hưởng đến kho mã của bạn, và gửi thông báo để tạo webhook HTTP.\nTạo tối đa 5.000 kho lưu trữ theo mặc định: Tạo tối đa 25.000 kho lưu trữ bổ sung theo yêu cầu, cũng như lưu trữ và lập phiên bản bất kỳ loại tệp nào.\n"
},
{
	"uri": "//localhost:1313/vi/4-codebuild/4.3-assigniamcodebuild-copy/",
	"title": "Gán IAM cho CodeBuild",
	"tags": [],
	"description": "",
	"content": "Tạo IAM cho CodeBuild Truy cập CodeCBuild và chọn Service role\nChúng ta sẽ được chuyển tới service role của CodeBuild\nChúng ta chọn Add permissions\nChọn Attach policies\nChúng ta tìm kiếm và tích chọn IAM_CODEDBUILD_CICD mà chúng ta đã tạo\nChọn Add permissions\nĐã thêm policy thành công\n"
},
{
	"uri": "//localhost:1313/vi/6-codedeploy/6.3-creategroupdeploy/",
	"title": "Tạo Group Deploy",
	"tags": [],
	"description": "",
	"content": " Chúng ta truy cập vào aws-ci-cd-codedeploy trong CodeDeploy mà chúng ta đã tạo.\nChọn Create deployment group Màn hình Create deployment group\nMục Deployment group name điền aws-ci-cd-deploy-group Mục Service role chúng ta chọn CodeDeployServiceRole Mục Deployment type chúng ta chọn chiến thuật deploy In-place\nMục Environment configuration\nChọn Amazon EC2 instances\nName : aws-ci-cd-ec2 Đây là tên của EC2 mà chúng ta đã tạo\nMục Agent configuration with AWS Systems Manager\nInstall AWS CodeDeploy Agent chúng ta chọn Never\nỞ phần này chúng ta đã cài đặt CodeDeploy Agent và không có nhu cầu update\nMục Deployment settings\nChọn CodeDeployDefault.AllAtOne Mục Load balancer\nUncheck Enable load balancing Create deployment group\n"
},
{
	"uri": "//localhost:1313/vi/7-codepipeline/7.3-sns/",
	"title": "Tạo SNS để nhận thông báo - Optional",
	"tags": [],
	"description": "",
	"content": "Tạo SNS để nhận thông báo - Optional Truy cập SNS\nChọn Topics\nChọn Create topic\nỞ màn hình Create topic\nType chọn Standard\nMục Name chọn AWS-CICD-TOPIC\nCreate topic\nTruy cập SNS\nChọn Subscriptions\nChọn Create subscription\nỞ màn hình Create subscription\nỞ Topic ARN chọn topic ARN mà chúng ta đã tạo AWS-CICD-TOPIC\nMục Protocol chọn Email\nMục Endpoint điền email bạn muốn nhận thông báo\nCreate subscription\nVào gmail để xác nhận\nGán notification cho Codepipeline\nMục Notification name điền aws-ci-cd-pipeline-noti Chọn 1 số sự kiện mà bạn muốn nhận thông báo Phần Targets chọn SNS mà chúng ta đã tạo Submit "
},
{
	"uri": "//localhost:1313/vi/5-ec2/5.4-installdocker/",
	"title": "Cài đặt Docker",
	"tags": [],
	"description": "",
	"content": "Tài liệu tham khảo Tại đây\nCài đặt Docker\nsudo yum install docker\rThêm group membership cho ec2-user để có thể thực hiện các lệnh docker mà không cần quyền sudo\nsudo usermod -a -G docker ec2-user id ec2-user\r# Reload a Linux user's group assignments to docker w/o logout\rnewgrp docker\rCấu hình để docker để có thể chạy lúc AMI boot time:\nsudo systemctl enable docker.service\rTiến hành chạy Docker\nsudo systemctl start docker.service\rKiểm tra trạng thái Docker\nsudo systemctl status docker.service\rNếu kết quả như này là đã chạy docker thành công.\n"
},
{
	"uri": "//localhost:1313/vi/4-codebuild/",
	"title": "CodeBuild",
	"tags": [],
	"description": "",
	"content": "AWS CodeBuild Xây dựng và kiểm thử mã với khả năng điều chỉnh quy mô tự động Tránh phải thiết lập, quản lý hoặc vá lỗi cho các máy chủ xây dựng riêng của bạn.\nTự động điều chỉnh quy mô dung lượng để các bản dựng mất thời gian chờ trong hàng đợi khi chạy.\nChỉ cần thanh toán cho số phút dựng bạn sử dụng.\nSử dụng môi trường xây dựng được đóng gói sẵn hoặc của riêng bạn, cũng như mã hóa tạo tác bằng các khóa của riêng bạn.\nUse cases Tự động hóa quy trình tích hợp liên tục và phân phối liên tục (CI/CD): Tạo một quy trình phát hành phần mềm hoàn toàn tự động, khuyến khích thay đổi mã thông qua nhiều môi trường triển khai.\nLoại bỏ tính phức tạp của việc quản lý các máy chủ xây dựng: Chạy các tác vụ xây dựng Jenkins hiện có của bạn trên CodeBuild để không cần phải cấu hình và quản lý các nút xây dựng Jenkins.\nXây dựng mã nguồn được lưu trữ trên GitHub: Tự động triển khai các bản dựng phần mềm bằng cách sử dụng kho lưu trữ GitHub sẵn có và đăng tải kết quả lên GitHub.\n"
},
{
	"uri": "//localhost:1313/vi/5-ec2/",
	"title": "EC2",
	"tags": [],
	"description": "",
	"content": "1. Tạo EC2 2. Tạo EC2 IAM 3. Cài đặt CodeDeploy Agent 4. Cài đặt Docker "
},
{
	"uri": "//localhost:1313/vi/5-ec2/5.5-iam/",
	"title": "Tạo IAM cho EC2",
	"tags": [],
	"description": "",
	"content": " Truy cập IAM\nChọn Policies sau đó chọn Create policy Màn hình Create policy\nỞ mục Select a service ta tìm kiếm service Elastic Container Registry - ECR, vì EC2 cần một số quyền để truy cập và lấy các images trong ECR được tạo ra từ CodeBuild\nCác bạn chuyển qua định dạng JSON chọn các quyền sau\nSau đó chọn Next\n{\r\u0026quot;Version\u0026quot;: \u0026quot;2012-10-17\u0026quot;,\r\u0026quot;Statement\u0026quot;: [\r{\r\u0026quot;Effect\u0026quot;: \u0026quot;Allow\u0026quot;,\r\u0026quot;Action\u0026quot;: [\r\u0026quot;ecr:GetAuthorizationToken\u0026quot;,\r\u0026quot;ecr:BatchCheckLayerAvailability\u0026quot;,\r\u0026quot;ecr:GetDownloadUrlForLayer\u0026quot;,\r\u0026quot;ecr:GetRepositoryPolicy\u0026quot;,\r\u0026quot;ecr:DescribeRepositories\u0026quot;,\r\u0026quot;ecr:ListImages\u0026quot;,\r\u0026quot;ecr:DescribeImages\u0026quot;,\r\u0026quot;ecr:BatchGetImage\u0026quot;,\r\u0026quot;ecr:GetLifecyclePolicy\u0026quot;,\r\u0026quot;ecr:GetLifecyclePolicyPreview\u0026quot;,\r\u0026quot;ecr:ListTagsForResource\u0026quot;,\r\u0026quot;ecr:DescribeImageScanFindings\u0026quot;,\r\u0026quot;s3:Get*\u0026quot;,\r\u0026quot;s3:List*\u0026quot;,\r\u0026quot;s3:Describe*\u0026quot;\r],\r\u0026quot;Resource\u0026quot;: \u0026quot;*\u0026quot;\r}\r]\r}\rĐiền tên Policies là IAM_EC2_CICD và chọn Create policy Tạo EC2 Role và gắn policy vừa tạo\nChọn Roles\nChọn Create role\nStep 1\nChọn AWS service\nTìm kiếm và chọn service EC2\nPhần Use case chọn EC2\nNext\nStep 2\nCác bạn tìm kiếm policy mà các bạn đã tạo IAM_EC2_CICD\nNext\nStep 3\nPhần Role name điền EC2_CICD_Role\nCreate role\nGán quyền cho EC2\nChọn EC2\nChọn Actions\nChọn Security\nChọn Modify IAM role\nModify IAM role\nChọn IAM role mà chúng ta đã tạo ở bước trước đó IAM_EC2_CICD\nUpdate IAM role\n"
},
{
	"uri": "//localhost:1313/vi/6-codedeploy/",
	"title": "CodeDeploy",
	"tags": [],
	"description": "",
	"content": "AWS CodeDeploy Tự động hóa việc triển khai mã để duy trì thời gian hoạt động của ứng dụng Tự động hóa và triển khai nhất quán các ứng dụng trên nhiều môi trường phát triển, kiểm thử và sản xuất của bạn.\nTheo dõi tình trạng của nhóm ứng dụng và tự động khôi phục các bản cập nhật khi cần.\nKhởi chạy và theo dõi trạng thái của các bản triển khai ứng dụng thông qua Bảng điều khiển quản lý AWS hoặc Giao diện dòng lệnh (CLI) AWS.\nSử dụng lại mã thiết lập bạn hiện có và tích hợp với quy trình phát hành phần mềm hiện tại hay chuỗi công cụ phân phối liên tục.\nUse cases Tự động hóa việc triển khai để loại bỏ thao tác thủ công: Lặp lại quy trình triển khai ứng dụng trên hàng loạt các nhóm hoặc phiên bản khác nhau bằng cách sử dụng mô hình cài đặt dựa trên tệp và lệnh.\nTriển khai đến nhiều máy chủ: Quản lý hoạt động triển khai đến hàng nghìn máy chủ bằng chức năng giám sát và chuyển lưu lượng nâng cao.\nSử dụng các kỹ thuật triển khai nâng cao: Hỗ trợ nhiều phương thức triển khai, bao gồm tại chỗ, canary và triển khai lục/lam.\nGiám sát tình trạng và trở về phiên bản trước: Cấu hình các cảnh báo có chức năng trở về phiên bản trước và dừng quy trình triển khai ứng dụng đang diễn ra.\n"
},
{
	"uri": "//localhost:1313/vi/7-codepipeline/",
	"title": "CodePipeline",
	"tags": [],
	"description": "",
	"content": "AWS CodePipeline Tự động hóa các quy trình phân phối liên tục để cung cấp các bản cập nhật nhanh chóng và ổn định Lập mô hình quy trình phát hành phần mềm của bạn và giảm thiểu công sức thiết lập hoặc cung cấp máy chủ.\nXác định các giai đoạn trong quy trình phát hành phần mềm của bạn bằng Bảng điều khiển quản lý AWS hoặc Giao diện dòng lệnh (CLI) AWS.\nNhanh chóng phát hành các tính năng mới, lặp lại dựa trên phản hồi và phát hiện lỗi bằng cách kiểm thử mỗi khi mã thay đổi.\nĐiều chỉnh cho phù hợp với nhu cầu của bạn bằng cách sử dụng các plugin của riêng bạn hoặc các plugin tích hợp sẵn trong bất kỳ bước nào của quá trình phát hành.\nUse cases Xác định cấu trúc quy trình của bạn: Cập nhật các quy trình hiện có và cung cấp mẫu để tạo ra những quy trình mới với một tài liệu JSON khai báo.\nNhận thông báo cho các sự kiện: Giám sát các sự kiện tác động đến quy trình của bạn bằng Dịch vụ thông báo đơn giản (SNS) của Amazon với chức năng cung cấp tin nhắn trạng thái và liên kết đến nguồn sự kiện.\nKiểm soát và cấp quyền truy cập: Quản lý những cá nhân có thể thay đổi và kiểm soát quy trình làm việc phát hành của bạn với Quản lý danh tính và truy cập (IAM) trong AWS.\nTích hợp hệ thống tùy chỉnh của riêng bạn: Đăng ký một hành động tùy chỉnh và liên kết máy chủ vào quy trình của bạn bằng cách tích hợp tác tử nguồn mở CodePipeline với các máy chủ của bạn.\n"
},
{
	"uri": "//localhost:1313/vi/8-ecr/",
	"title": "ECR",
	"tags": [],
	"description": "",
	"content": "AWS ECR Dễ dàng lưu trữ, chia sẻ và triển khai phần mềm bộ chứa của bạn ở bất cứ nơi nào Đưa images bộ chứa lên Amazon ECR mà không cần cài đặt hoặc mở rộng cơ sở hạ tầng và lấy hình ảnh bằng bất kỳ công cụ quản lý nào.\nChia sẻ và tải xuống images một cách an toàn qua Giao thức truyền siêu văn bản bảo mật (HTTPS) với tính năng mã hóa tự động và kiểm soát truy cập.\nTruy cập và phân phối images nhanh hơn, giảm thời gian tải xuống và cải thiện tính khả dụng bằng cơ sở hạ tầng ổn định, có quy mô linh hoạt.\nUse cases Quản lý lỗ hổng phần mềm: Sử dụng Amazon Inspector - dịch vụ quản lý lỗ hổng được tích hợp chặt chẽ - để đáp ứng các yêu cầu bảo mật về tuân thủ images, từ đó tự động hóa quá trình quét đánh giá lỗ hổng và định tuyến nhãn khắc phục.\nHợp lý hóa khối lượng công việc triển khai: Xuất bản các ứng dụng trong bộ chứa chỉ với một lệnh duy nhất và dễ dàng tích hợp những môi trường tự quản lý của bạn.\nQuản lý các chính sách về vòng đời của hình ảnh: Tự động lưu các hình ảnh gần đây nhất và lưu trữ hình ảnh bạn không cần đến. Sử dụng quy tắc và gắn thẻ để nhanh chóng truy cập hình ảnh.\n"
},
{
	"uri": "//localhost:1313/vi/9-test/",
	"title": "Kiểm tra thành quả",
	"tags": [],
	"description": "",
	"content": " Chúng ta truy cập vào CodeCommit\nỞ màn hình aws-ci-cd-pipeline\nChọn Release change\nChọn Release\nChờ đợi thành quả\nTheo dõi từng bước Sau khi tất cả các bước thành công, chúng ta quay lại EC2 và truy cập vào Public IPv4 address\nCác bạn hãy chắc chắn rằng mình truy cập bằng http Kết quả\nChúng ta hãy thử thay đổi code trong phần CodePipeline để quá trình CI/CD tự hoạt động\nTruy cập aws-ci-cd-codecommit / views / index.pug\nChúng ta hãy thử thay đổi nội dung của thẻ h1\nSau đó tiến thành điền thông tin và Commit\nKhi sau khi Commit khi quay lại CodePipeline chúng ta có thể thấy trạng thái đã tahy đổi thành In progress\nKhi tất cả step đã thành công thì quay lại truy cập vào Public IPv4 address của EC2\n"
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]