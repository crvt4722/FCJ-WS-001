[
{
	"uri": "//localhost:1313/4-codebuild/4.1-createcodebuild/",
	"title": "Create CodeBuild",
	"tags": [],
	"description": "",
	"content": "Create CodeBuild Navigate to CodeBuild, select Build projects, then choose Create project.\nIn the Create build project interface:\nEnter aws-ci-cd-codebuild for the Project name.\nSource Section\nSource provider: AWS CodeCommit\nRepository: aws-ci-cd-codecommit - The name of the CodeCommit repository we created.\nChoose the Branch: main\nEnvironment Section\nFor Service role, select New service role to let AWS create a new service role for us. Buildspec Section\nSelect Use a buildspec file, so CodeBuild will read the buildspec.yml file from CodeCommit. Logs Section\nChoose CloudWatch logs - optional.\nSince we pushed the build output to ECR, we won\u0026rsquo;t select the S3 option.\nComplete the build project.\n"
},
{
	"uri": "//localhost:1313/3-codecommit/3.1-createcodecommit/",
	"title": "Create CodeCommit",
	"tags": [],
	"description": "",
	"content": "Create CodeCommit First, we will create a CodeCommit repository.\nAccess CodeCommit Enter aws-ci-cd-codecommit for the repository name and select Create.\nComplete the repository creation.\nPerform a code push to CodeCommit using the created Credentials.\nSuccessful code push.\n"
},
{
	"uri": "//localhost:1313/7-codepipeline/7.1-createcodepipeline/",
	"title": "Create CodePipeline",
	"tags": [],
	"description": "",
	"content": "Create CodePipeline Navigate to CodePipeline\nClick Pipelines, then click Create pipeline. In the Create new pipeline screen:\nStep 1: Choose pipeline settings\nSet Pipeline name to aws-ci-cd-pipeline.\nClick Next.\nStep 2: Add source stage\nChoose AWS CodeCommit for Source provider.\nSelect aws-ci-cd-codecommit for Repository name, which we created when setting up CodeCommit.\nChoose main for Branch name.\nClick Next.\nStep 3: Add build stage\nChoose AWS CodeBuild for Build provider.\nChoose Asia Pacific (Singapore) for Region.\nSelect aws-ci-cd-codebuild for Project name, which we created when setting up CodeBuild.\nClick Next.\nStep 4: Add deploy stage\nChoose AWS CodeDeploy for Deploy provider.\nChoose Asia Pacific (Singapore) for Region.\nSelect aws-ci-cd-codedeploy for Application name, which we created when setting up CodeDeploy.\nSelect aws-ci-cd-deploy-group for Deployment group, which we created when setting up the deployment group in CodeDeploy.\nClick Next.\nStep 5: Review\nClick Create Pipeline.\n"
},
{
	"uri": "//localhost:1313/5-ec2/5.1-createec2/",
	"title": "Create EC2",
	"tags": [],
	"description": "",
	"content": "Create EC2 Navigate to EC2 and select Launch instances.\nIn the Name and tags section of the instance, enter aws-ci-cd-ec2.\nProceed to select an AMI:\nChoose Quick Start.\nSelect Amazon Linux 2.\nChoose an AMI.\nCreate a Key pair:\nSelect Create key pair.\nFor Key pair name, enter aws-ci-cd-ec2-key (optional name, you can choose any).\nFor Key pair type, select RSA.\nFor Private key file format, select .pem.\nSelect Create key pair.\nChoose an Instance type.\nNetwork settings:\nSelect Create security group.\nAllow SSH traffic from and Allow HTTP traffic from the internet.\nProceed to Launch instance.\n"
},
{
	"uri": "//localhost:1313/8-ecr/8.1-createecr/",
	"title": "Create ECR",
	"tags": [],
	"description": "",
	"content": " We navigate to ECR\nSelect Repositories and then choose Create repositories In the Create repository screen,\nChoose Private\nIn the Repository name field, enter ci_cd_workshop\nClick on Create repository\n"
},
{
	"uri": "//localhost:1313/2-prepare/2.1-gitcredentials/",
	"title": "Create HTTPS Git credentials for AWS CodeCommit",
	"tags": [],
	"description": "",
	"content": "Create HTTPS Git credentials for AWS CodeCommit Access Security credentials\nAt the HTTPS Git credentials for AWS CodeCommit section, select Generate credentials and save the credential information.\n"
},
{
	"uri": "//localhost:1313/6-codedeploy/6.1-createiam/",
	"title": "Create IAM for CodeDeploy",
	"tags": [],
	"description": "",
	"content": " We access IAM\nSelect Roles and then click on Create role In the Create role interface\nIn the Service or use case section, search for and select CodeDeploy\nClick Next\nIn the Add permissions screen\nThe Permissions policies section is preselected\nClick Next\nNext, we add the AmazonEC2RoleforAWSCodeDeploy permission to the CodeDeployServiceRole\nIn the Name, review, and create screen\nEnter Role name as CodeDeployServiceRole\nClick Create role\n"
},
{
	"uri": "//localhost:1313/1-introduce/",
	"title": "Introduce",
	"tags": [],
	"description": "",
	"content": "Introduction to the Lab: Implementing CI/CD Pipeline Using AWS Services 1. Overview In the modern business world, continuous competition and the need to respond quickly and efficiently to users are key factors in the success of any enterprise. Deploying a website with high availability, robust performance, and solid security not only enhances a company's reputation but also creates a superior user experience, driving sustainable growth. To achieve this, Amazon Web Services (AWS) has become an indispensable tool, helping businesses not only build but also optimize their web systems. In today's workshop, we will explore the essential steps and AWS services that can help you deploy a website that not only meets but exceeds customer expectations, ensuring business continuity and enhancing competitiveness in the market.\n2. Objectives The objective of this lab is to deploy a highly available, high-performance, and secure website for businesses using AWS services.
\nIntroduction Preparation CodeCommit CodeBuild EC2 CodeDeploy CodePipeline ECR Testing "
},
{
	"uri": "//localhost:1313/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction to the Lab: Implementing CI/CD Pipeline Using AWS Services 1. Overview In the modern business world, continuous competition and the need to respond quickly and efficiently to users are key factors in the success of any enterprise. Deploying a website with high availability, robust performance, and solid security not only enhances a company's reputation but also creates a superior user experience, driving sustainable growth. To achieve this, Amazon Web Services (AWS) has become an indispensable tool, helping businesses not only build but also optimize their web systems. In today's workshop, we will explore the essential steps and AWS services that can help you deploy a website that not only meets but exceeds customer expectations, ensuring business continuity and enhancing competitiveness in the market.\n2. Objectives The objective of this lab is to deploy a highly available, high-performance, and secure website for businesses using AWS services.
\nContent Introduction Preparation CodeCommit CodeBuild EC2 CodeDeploy CodePipeline ECR Testing "
},
{
	"uri": "//localhost:1313/5-ec2/5.2-testconnecttoec2/",
	"title": "Check SSH Connection to EC2",
	"tags": [],
	"description": "",
	"content": " Go back to the homepage and ensure that your Instance state is Running.\nConnect via SSH to the EC2 Instance:\nSelect the EC2 instance you just created.\nChoose Connect.\nOn the Connect to instance screen, select SSH client.\nOpen a Terminal window and establish the connection:\nNavigate to the folder containing the key pair file we created.\nchmod 400 \u0026lt;key-pair-name.pem\u0026gt;\rProceed with the connection:\nssh -i \u0026quot;mac-key.pem\u0026quot; ec2-user@ec2-13-215-154-122.ap-southeast-1.compute.amazonaws.com\rYou can obtain the connection information from the Connect to instance screen.\nSuccessful connection.\n"
},
{
	"uri": "//localhost:1313/8-ecr/8.2-configecr-ci/",
	"title": "Configure ECR for CI",
	"tags": [],
	"description": "",
	"content": " We navigate to ECR\nCopy the URI of the repository you just created Access CodeCommit\nSelect Repositories\nAccess the repository we created aws-ci-cd-codecommit\nAccess the buildspec.yml file Choose Edit\nReplace all \u0026lt;ECR_REPOSITORY_URI\u0026gt; placeholders with the URI of the ECR repository\nReplace all placeholders with ap-southeast-1\nAfter making the changes, provide necessary information\nCommit changes\n"
},
{
	"uri": "//localhost:1313/7-codepipeline/7.2-configcodepipeline/",
	"title": "Configuring CodePipeline",
	"tags": [],
	"description": "",
	"content": "Configuring CodePipeline After creating the CodePipeline, you may encounter an error during the Deploy stage.\nOn the aws-ci-cd-pipeline screen, select Edit.\nIn the Edit: Deploy section, select Edit stage.\nIn the edit window:\nChange Input artifacts to Source Artifact.\nSelect Done.\nComplete the process by selecting Save.\n"
},
{
	"uri": "//localhost:1313/6-codedeploy/6.2-createcodedeploy/",
	"title": "Create CodeDeploy",
	"tags": [],
	"description": "",
	"content": "Create CodeDeploy Access CodeDeploy\nSelect Applications and then click Create application. In the Create application interface:\nEnter Application name as aws-ci-cd-codedeploy.\nUnder Compute platform, select EC2/On-premises.\nClick Create application.\nApplication created successfully.\n"
},
{
	"uri": "//localhost:1313/4-codebuild/4.2-createiamcodebuild/",
	"title": "Create IAM for CodeBuild",
	"tags": [],
	"description": "",
	"content": "Create IAM for CodeBuild Access IAM:\nSelect Policies.\nChoose Create policy.\nCreate policy screen:\nIn the Service section, search for Elastic Container Registry. {\r\u0026quot;Version\u0026quot;: \u0026quot;2012-10-17\u0026quot;,\r\u0026quot;Statement\u0026quot;: [\r{\r\u0026quot;Effect\u0026quot;: \u0026quot;Allow\u0026quot;,\r\u0026quot;Action\u0026quot;: [\r\u0026quot;ecr:CompleteLayerUpload\u0026quot;,\r\u0026quot;ecr:GetAuthorizationToken\u0026quot;,\r\u0026quot;ecr:UploadLayerPart\u0026quot;,\r\u0026quot;ecr:InitiateLayerUpload\u0026quot;,\r\u0026quot;ecr:BatchCheckLayerAvailability\u0026quot;,\r\u0026quot;ecr:PutImage\u0026quot;\r],\r\u0026quot;Resource\u0026quot;: \u0026quot;*\u0026quot;\r}\r]\r}\rSwitch to the JSON format and enter the necessary permissions for CodeBuild to interact with ECR.\nClick Next.\nFor Policy name, enter IAM_CODEDBUILD_CICD.\nSelect Create policy.\n"
},
{
	"uri": "//localhost:1313/2-prepare/",
	"title": "Preparation Steps",
	"tags": [],
	"description": "",
	"content": "Preparation Steps Ensure Your AWS Account Has the Following Permissions:\n"
},
{
	"uri": "//localhost:1313/2-prepare/2.2-sourcecode/",
	"title": "Source code",
	"tags": [],
	"description": "",
	"content": "Source Code Preparation You can obtain the source code Here. Source Code Structure Here we prepare a simple Express.js server. There are 2 files we need to pay attention to: appspec.yml buildspec.yml buildspec.yml version\nDefines the version of buildspec.yml. In this case, it is 0.2.\nphases\nConsists of 3 main phases: install, pre_build, build, post_build.\ninstall\nIn this block, a version of Node.js (the latest version) is installed using runtime-versions.\nThen, Docker daemon is started using the command nohup /usr/local/bin/dockerd and a timeout of 15 seconds is set to wait until Docker daemon is ready.\nDocker daemon is started to listen on both UNIX socket (unix:///var/run/docker.sock) and TCP socket (tcp://127.0.0.1:2375).\nOverlay2 storage driver is used for Docker daemon.\npre_build\nIn this block, actions before the build process takes place are described.\nLogging in to Amazon ECR (Elastic Container Registry) is done using AWS CLI and getting the password by aws ecr get-login-password.\nA variable $REPOSITORY_URI is set to store the URI of the ECR repository.\n$COMMIT_HASH is used to get the first 7 characters of CODEBUILD_RESOLVED_SOURCE_VERSION returned from CodeBuild.\nIMAGE_TAG is used as a tag for the Docker image, defaulting to latest.\nbuild\nIn this block, actions to build the Docker image are described.\nThe docker build command is used to build a Docker image from the Dockerfile in the current directory and tag it as $REPOSITORY_URI:latest.\nThe Docker image is retagged with the tag $REPOSITORY_URI:$IMAGE_TAG.\npost_build\nIn this block, actions after the build process is done are described.\nThe Docker image is pushed to Amazon ECR using the docker push command.\nAn imagedefinitions.json file is generated, containing the definition of the Docker image with the name \u0026ldquo;exp-code-pipeline\u0026rdquo; and imageUri as $REPOSITORY_URI:$IMAGE_TAG.\nappspec.yml version\nDefines the version of the configuration file.\nos\nSpecifies the operating system that this deployment process is designed to run on. In this case, the deployment process is expected to run on Linux.\nfiles\nProvides a list of files necessary for the deployment process.\nhooks\nDefines hooks (actions) in the deployment process, such as before installation (BeforeInstall) or when the application is started (ApplicationStart).\nBeforeInstall:\nThis is a hook called before the installation process begins.\npull_docker_image.sh: A script executed to pull a Docker image from a Docker repository.\nTimeout is set to 300 seconds (5 minutes), and the commands are executed under the root user.\nApplicationStart\nThis is a hook called after the installation process completes and the application is ready to start.\nstart_docker_image.sh: A script executed to start the previously pulled Docker image.\nTimeout is set to 300 seconds (5 minutes), and the commands are executed under the root user.\n"
},
{
	"uri": "//localhost:1313/4-codebuild/4.3-assigniamcodebuild-copy/",
	"title": "Assign IAM for CodeBuild",
	"tags": [],
	"description": "",
	"content": "Assign IAM for CodeBuild Access CodeCBuild and select Service role.\nYou will be directed to the service role of CodeBuild.\nChoose Add permissions.\nSelect Attach policies.\nSearch and select IAM_CODEDBUILD_CICD that we created.\nClick Add permissions.\nPolicy added successfully.\n!\n"
},
{
	"uri": "//localhost:1313/3-codecommit/",
	"title": "CodeCommit",
	"tags": [],
	"description": "",
	"content": "AWS CodeCommit Securely host highly scalable private Git repositories and collaborate on code Remove the need to host, maintain, back up, or scale your own source control servers.\nCustomize user-specific access to your repositories with automatically encrypted files in transit.\nKeep your repositories highly available and accessible with scalable, redundant, and durable architecture.\nMaintain your repositories close to your build, staging, and production environments on AWS.\nUse cases Collaborate on code: Implement workflows that include code reviews and feedback by default, and control who can make changes to specific branches.\nUse your existing tools: Keep using your preferred development environment plugins, continuous integration and delivery (CI/CD) systems, and graphical clients.\nReceive notifications and custom scripts: Get Amazon Simple Notification Service (SNS) notifications for events impacting your repositories, and send notifications to create HTTP webhooks.\nCreate up to 5,000 repositories by default: Generate up to 25,000 additional repositories by request, and store and version any kind of file.\n"
},
{
	"uri": "//localhost:1313/8-ecr/8.3-configecr-cd/",
	"title": "Configure ECR for CD",
	"tags": [],
	"description": "",
	"content": " We navigate to ECR\nCopy the URI of the repository you just created Access CodeCommit\nSelect Repositories\nAccess the repository we created aws-ci-cd-codecommit\nAccess the scripts / pull_docker_image.sh file\nChoose Edit Replace DOCKER_IMAGE with the URI of your ECR repository make sure it has the :latest tag.\nReplace region with the region of your ECR\nAfter making the changes, provide necessary information\nCommit changes\nAccess the scripts / start_docker_image.sh file\nChoose Edit Replace DOCKER_IMAGE with the URI of your ECR repository make sure it has the :latest tag. After making the changes, provide necessary information\nCommit changes\n"
},
{
	"uri": "//localhost:1313/6-codedeploy/6.3-creategroupdeploy/",
	"title": "Create Deployment Group",
	"tags": [],
	"description": "",
	"content": " Access aws-ci-cd-codedeploy in CodeDeploy that we created earlier.\nClick Create deployment group. In the Create deployment group screen:\nEnter Deployment group name as aws-ci-cd-deploy-group. Under Service role, select CodeDeployServiceRole. For Deployment type, choose In-place. Under Environment configuration:\nChoose Amazon EC2 instances.\nName: aws-ci-cd-ec2 This is the name of the EC2 instance we created.\nFor Agent configuration with AWS Systems Manager:\nSelect Never for Install AWS CodeDeploy Agent. We have already installed the CodeDeploy Agent and do not need updates at this time. Under Deployment settings:\nChoose CodeDeployDefault.AllAtOnce. For Load balancer:\nUncheck Enable load balancing. Click Create deployment group. "
},
{
	"uri": "//localhost:1313/7-codepipeline/7.3-sns/",
	"title": "Create SNS for Notifications - Optional",
	"tags": [],
	"description": "",
	"content": "Create SNS for Notifications - Optional Access SNS\nSelect Topics\nClick on Create topic\nIn the Create topic interface\nChoose Standard for the type\nIn the Name field, enter AWS-CICD-TOPIC\nClick Create topic\nAccess SNS\nSelect Subscriptions\nClick on Create subscription\nIn the Create subscription screen\nChoose the topic ARN we created AWS-CICD-TOPIC in Topic ARN\nFor Protocol, select Email\nIn the Endpoint field, enter the email address where you want to receive notifications\nClick Create subscription\nGo to your email to confirm the subscription\nAssign notification to Codepipeline\nIn the Notification name field, enter aws-ci-cd-pipeline-noti Select the events for which you want to receive notifications In the Targets section, choose the SNS topic we created Click Submit "
},
{
	"uri": "//localhost:1313/5-ec2/5.3-installcodedeployagent/",
	"title": "Install CodeDeploy Agent",
	"tags": [],
	"description": "",
	"content": "Reference documentation Here\nUpdate yum and install necessary packages:\nsudo yum update\rsudo yum install ruby\rsudo yum install wget\rNavigate to the home directory:\ncd /home/ec2-user\rDownload the CodeDeploy agent:\nwget https://aws-codedeploy-ap-southeast-1.s3.ap-southeast-1.amazonaws.com/latest/install\rCurrently, I am performing this in the ap-southeast-1 region. If you are in a different region, refer to the link at the top of the page for installation instructions specific to that region.\nAfter installation, you will see the install file.\nGrant permissions and install the install file:\nchmod +x ./install\rsudo ./install auto\rInstallation successful.\nCheck the status of the CodeDeploy Agent:\nsystemctl status codedeploy-agent\rThe CodeDeploy Agent is now running successfully.\n"
},
{
	"uri": "//localhost:1313/4-codebuild/",
	"title": "CodeBuild",
	"tags": [],
	"description": "",
	"content": "AWS CodeCommit Build and test code with automatic scaling Avoid having to set up, manage, or patch your own build servers.\nScale capacity automatically so builds aren\u0026rsquo;t waiting in queue to run.\nPay only for the build minutes that you use.\nUse prepackaged build environments or your own, and encrypt artifacts with your own keys.\nUse cases Automate continuous integration and delivery (CI/CD) pipelines: Create a fully automated software release process that promotes code changes through multiple deployment environments.\nRemove the complexity of managing build servers: Run your existing Jenkins build jobs on CodeBuild to remove the need for configuring and managing Jenkins build nodes.\nBuild source code hosted on GitHub: Automatically initiate software builds using an existing GitHub repository and post the results back to GitHub.\n"
},
{
	"uri": "//localhost:1313/5-ec2/5.4-installdocker/",
	"title": "Install Docker",
	"tags": [],
	"description": "",
	"content": "Reference documentation Here\nInstall Docker:\nsudo yum install docker\rAdd group membership for ec2-user to execute docker commands without sudo:\nsudo usermod -a -G docker ec2-user id ec2-user\r# Reload a Linux user's group assignments to docker without logout\rnewgrp docker\rConfigure Docker to run at AMI boot time:\nsudo systemctl enable docker.service\rStart Docker:\nsudo systemctl start docker.service\rCheck the status of Docker:\nsudo systemctl status docker.service\rIf the result looks like this, Docker has been successfully started.\n"
},
{
	"uri": "//localhost:1313/5-ec2/5.5-iam/",
	"title": "Create IAM for EC2",
	"tags": [],
	"description": "",
	"content": " Access IAM\nSelect Policies and then click Create policy. Create policy screen:\nUnder Select a service, search for Elastic Container Registry - ECR, as the EC2 instance needs permissions to access and retrieve images from ECR created by CodeBuild.\nSwitch to the JSON format and select the following permissions:\nThen click Next.\n{\r\u0026quot;Version\u0026quot;: \u0026quot;2012-10-17\u0026quot;,\r\u0026quot;Statement\u0026quot;: [\r{\r\u0026quot;Effect\u0026quot;: \u0026quot;Allow\u0026quot;,\r\u0026quot;Action\u0026quot;: [\r\u0026quot;ecr:GetAuthorizationToken\u0026quot;,\r\u0026quot;ecr:BatchCheckLayerAvailability\u0026quot;,\r\u0026quot;ecr:GetDownloadUrlForLayer\u0026quot;,\r\u0026quot;ecr:GetRepositoryPolicy\u0026quot;,\r\u0026quot;ecr:DescribeRepositories\u0026quot;,\r\u0026quot;ecr:ListImages\u0026quot;,\r\u0026quot;ecr:DescribeImages\u0026quot;,\r\u0026quot;ecr:BatchGetImage\u0026quot;,\r\u0026quot;ecr:GetLifecyclePolicy\u0026quot;,\r\u0026quot;ecr:GetLifecyclePolicyPreview\u0026quot;,\r\u0026quot;ecr:ListTagsForResource\u0026quot;,\r\u0026quot;ecr:DescribeImageScanFindings\u0026quot;,\r\u0026quot;s3:Get*\u0026quot;,\r\u0026quot;s3:List*\u0026quot;,\r\u0026quot;s3:Describe*\u0026quot;\r],\r\u0026quot;Resource\u0026quot;: \u0026quot;*\u0026quot;\r}\r]\r}\rEnter the Policy name as IAM_EC2_CICD and click Create policy. Grant permissions to EC2\nSelect EC2.\nChoose Actions.\nSelect Security.\nChoose Modify IAM role.\nModify IAM role:\nSelect the IAM role created in the previous step, IAM_EC2_CICD.\nClick Update IAM role.\n"
},
{
	"uri": "//localhost:1313/5-ec2/",
	"title": "EC2",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/6-codedeploy/",
	"title": "CodeDeploy",
	"tags": [],
	"description": "",
	"content": "AWS CodeDeploy Automate code deployment to maintain application uptime Automate and consistently deploy your applications across your development, test, and production environments.\nMonitor fleet health and automatically roll back updates as necessary.\nLaunch and track your application deployments\u0026rsquo; status through the AWS Management Console or AWS Command Line Interface (CLI).\nReuse your existing setup code and integrate with your existing software release process or continuous delivery toolchain.\nUse cases Automate deployments to remove manual operations: Repeat an application deployment across different groups or instances using a file and command-based install model.\nDeploy to many hosts: Manage deployments to thousands of hosts with advanced monitoring and traffic shifting.\nUse advanced deployment techniques: Support multiple deployment types, including in-place, canary, and blue/green deployments.\nMonitor health and rollback: Configure alarms that will initiate rollbacks, and stop application deployments in progress.\n"
},
{
	"uri": "//localhost:1313/7-codepipeline/",
	"title": "CodePipeline",
	"tags": [],
	"description": "",
	"content": "AWS CodePipeline Automate continuous delivery pipelines for fast and reliable updates Model your software release process and mitigate the need to set up or provision servers.\nDefine the stages of your software release process using the AWS Management Console or AWS command line interface (CLI).\nRapidly release new features, iterating on feedback and catching bugs by testing each code change.\nAdapt to your needs using your own plugins, or prebuilt plugins, in any step of your release process.\nUse cases Define your pipeline structure: Update existing pipelines and provide templates for creating new pipelines with a declarative JSON document.\nReceive notifications for events: Monitor events that impact your pipelines with Amazon Simple Notification Service (SNS), which provides a status message and link to the source of the event.\nControl and grant access: Manage who can change and control your release workflow with AWS Identity and Access Management (IAM).\nIntegrate your own custom systems: Register a custom action and hook servers into your pipeline by integrating the CodePipeline open source agent with your servers.\n"
},
{
	"uri": "//localhost:1313/8-ecr/",
	"title": "ECR",
	"tags": [],
	"description": "",
	"content": "AWS ECR Easily store, share, and deploy your container software anywhere Push container images to Amazon ECR without installing or scaling infrastructure, and pull images using any management tool.\nShare and download images securely over Hypertext Transfer Protocol Secure (HTTPS) with automatic encryption and access controls.\nAccess and distribute your images faster, reduce download times, and improve availability using a scalable, durable architecture.\nUse cases Manage software vulnerabilities: Meet your image compliance security requirements using the tightly integrated Amazon Inspector vulnerability management service to automate vulnerability assessment scanning and remediation ticket routing.\nStreamline your deployment workloads: Publish containerized applications with a single command and easily integrate your self-managed environments.\nManage image lifecycle policies: Automatically preserve the most recent images and archive ones you don’t need. Use rules and tagging to access images quickly.\n"
},
{
	"uri": "//localhost:1313/9-test/",
	"title": "Check the Results",
	"tags": [],
	"description": "",
	"content": " We access CodeCommit\nOn the aws-ci-cd-pipeline screen\nSelect Release change\nChoose Release\nWait for the results\nMonitor each step After all steps are successful, we return to EC2 and access the Public IPv4 address\nMake sure to access using http Result\nLet\u0026rsquo;s try changing the code in the CodePipeline to trigger the CI/CD process automatically\nAccess aws-ci-cd-codecommit / views / index.pug\nLet\u0026rsquo;s try changing the content of the h1 tag\nThen fill in the information and Commit\nAfter Commit, when we go back to CodePipeline we can see the status has changed to In progress\nWhen all steps are successful, return to access the Public IPv4 address of EC2\n"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]